/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.pathmazing.projectcontact.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.pathmazing.projectcontact.model.ProjectContact;
import com.pathmazing.projectcontact.model.ProjectContactModel;
import com.pathmazing.projectcontact.model.ProjectContactSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the ProjectContact service. Represents a row in the &quot;Pathmazing_ProjectContact&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ProjectContactModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectContactImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProjectContactImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ProjectContactModelImpl
	extends BaseModelImpl<ProjectContact> implements ProjectContactModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project contact model instance should use the <code>ProjectContact</code> interface instead.
	 */
	public static final String TABLE_NAME = "Pathmazing_ProjectContact";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"projectContactId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"clientName", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"clientCompany", Types.VARCHAR}, {"description", Types.CLOB},
		{"cooperateBy", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("projectContactId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("clientName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("clientCompany", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.CLOB);
		TABLE_COLUMNS_MAP.put("cooperateBy", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Pathmazing_ProjectContact (uuid_ VARCHAR(75) null,projectContactId LONG not null primary key,createDate DATE null,modifiedDate DATE null,clientName VARCHAR(75) null,email VARCHAR(75) null,clientCompany VARCHAR(75) null,description TEXT null,cooperateBy VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table Pathmazing_ProjectContact";

	public static final String ORDER_BY_JPQL =
		" ORDER BY projectContact.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Pathmazing_ProjectContact.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ProjectContact toModel(ProjectContactSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProjectContact model = new ProjectContactImpl();

		model.setUuid(soapModel.getUuid());
		model.setProjectContactId(soapModel.getProjectContactId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setClientName(soapModel.getClientName());
		model.setEmail(soapModel.getEmail());
		model.setClientCompany(soapModel.getClientCompany());
		model.setDescription(soapModel.getDescription());
		model.setCooperateBy(soapModel.getCooperateBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ProjectContact> toModels(
		ProjectContactSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ProjectContact> models = new ArrayList<ProjectContact>(
			soapModels.length);

		for (ProjectContactSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ProjectContactModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _projectContactId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProjectContactId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _projectContactId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProjectContact.class;
	}

	@Override
	public String getModelClassName() {
		return ProjectContact.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ProjectContact, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ProjectContact, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProjectContact, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ProjectContact)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ProjectContact, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ProjectContact, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ProjectContact)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ProjectContact, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ProjectContact, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ProjectContact>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ProjectContact.class.getClassLoader(), ProjectContact.class,
			ModelWrapper.class);

		try {
			Constructor<ProjectContact> constructor =
				(Constructor<ProjectContact>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<ProjectContact, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ProjectContact, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ProjectContact, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ProjectContact, Object>>();
		Map<String, BiConsumer<ProjectContact, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ProjectContact, ?>>();

		attributeGetterFunctions.put("uuid", ProjectContact::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<ProjectContact, String>)ProjectContact::setUuid);
		attributeGetterFunctions.put(
			"projectContactId", ProjectContact::getProjectContactId);
		attributeSetterBiConsumers.put(
			"projectContactId",
			(BiConsumer<ProjectContact, Long>)
				ProjectContact::setProjectContactId);
		attributeGetterFunctions.put(
			"createDate", ProjectContact::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ProjectContact, Date>)ProjectContact::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", ProjectContact::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ProjectContact, Date>)ProjectContact::setModifiedDate);
		attributeGetterFunctions.put(
			"clientName", ProjectContact::getClientName);
		attributeSetterBiConsumers.put(
			"clientName",
			(BiConsumer<ProjectContact, String>)ProjectContact::setClientName);
		attributeGetterFunctions.put("email", ProjectContact::getEmail);
		attributeSetterBiConsumers.put(
			"email",
			(BiConsumer<ProjectContact, String>)ProjectContact::setEmail);
		attributeGetterFunctions.put(
			"clientCompany", ProjectContact::getClientCompany);
		attributeSetterBiConsumers.put(
			"clientCompany",
			(BiConsumer<ProjectContact, String>)
				ProjectContact::setClientCompany);
		attributeGetterFunctions.put(
			"description", ProjectContact::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<ProjectContact, String>)ProjectContact::setDescription);
		attributeGetterFunctions.put(
			"cooperateBy", ProjectContact::getCooperateBy);
		attributeSetterBiConsumers.put(
			"cooperateBy",
			(BiConsumer<ProjectContact, String>)ProjectContact::setCooperateBy);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getProjectContactId() {
		return _projectContactId;
	}

	@Override
	public void setProjectContactId(long projectContactId) {
		_projectContactId = projectContactId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getClientName() {
		if (_clientName == null) {
			return "";
		}
		else {
			return _clientName;
		}
	}

	@Override
	public void setClientName(String clientName) {
		_clientName = clientName;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getClientCompany() {
		if (_clientCompany == null) {
			return "";
		}
		else {
			return _clientCompany;
		}
	}

	@Override
	public void setClientCompany(String clientCompany) {
		_clientCompany = clientCompany;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getCooperateBy() {
		if (_cooperateBy == null) {
			return "";
		}
		else {
			return _cooperateBy;
		}
	}

	@Override
	public void setCooperateBy(String cooperateBy) {
		_cooperateBy = cooperateBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ProjectContact.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProjectContact toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ProjectContact>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjectContactImpl projectContactImpl = new ProjectContactImpl();

		projectContactImpl.setUuid(getUuid());
		projectContactImpl.setProjectContactId(getProjectContactId());
		projectContactImpl.setCreateDate(getCreateDate());
		projectContactImpl.setModifiedDate(getModifiedDate());
		projectContactImpl.setClientName(getClientName());
		projectContactImpl.setEmail(getEmail());
		projectContactImpl.setClientCompany(getClientCompany());
		projectContactImpl.setDescription(getDescription());
		projectContactImpl.setCooperateBy(getCooperateBy());

		projectContactImpl.resetOriginalValues();

		return projectContactImpl;
	}

	@Override
	public int compareTo(ProjectContact projectContact) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), projectContact.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProjectContact)) {
			return false;
		}

		ProjectContact projectContact = (ProjectContact)obj;

		long primaryKey = projectContact.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ProjectContactModelImpl projectContactModelImpl = this;

		projectContactModelImpl._originalUuid = projectContactModelImpl._uuid;

		projectContactModelImpl._setModifiedDate = false;

		projectContactModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProjectContact> toCacheModel() {
		ProjectContactCacheModel projectContactCacheModel =
			new ProjectContactCacheModel();

		projectContactCacheModel.uuid = getUuid();

		String uuid = projectContactCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			projectContactCacheModel.uuid = null;
		}

		projectContactCacheModel.projectContactId = getProjectContactId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			projectContactCacheModel.createDate = createDate.getTime();
		}
		else {
			projectContactCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			projectContactCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			projectContactCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		projectContactCacheModel.clientName = getClientName();

		String clientName = projectContactCacheModel.clientName;

		if ((clientName != null) && (clientName.length() == 0)) {
			projectContactCacheModel.clientName = null;
		}

		projectContactCacheModel.email = getEmail();

		String email = projectContactCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			projectContactCacheModel.email = null;
		}

		projectContactCacheModel.clientCompany = getClientCompany();

		String clientCompany = projectContactCacheModel.clientCompany;

		if ((clientCompany != null) && (clientCompany.length() == 0)) {
			projectContactCacheModel.clientCompany = null;
		}

		projectContactCacheModel.description = getDescription();

		String description = projectContactCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			projectContactCacheModel.description = null;
		}

		projectContactCacheModel.cooperateBy = getCooperateBy();

		String cooperateBy = projectContactCacheModel.cooperateBy;

		if ((cooperateBy != null) && (cooperateBy.length() == 0)) {
			projectContactCacheModel.cooperateBy = null;
		}

		return projectContactCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ProjectContact, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ProjectContact, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProjectContact, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ProjectContact)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ProjectContact, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ProjectContact, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ProjectContact, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ProjectContact)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ProjectContact>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _projectContactId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _clientName;
	private String _email;
	private String _clientCompany;
	private String _description;
	private String _cooperateBy;
	private long _columnBitmask;
	private ProjectContact _escapedModel;

}